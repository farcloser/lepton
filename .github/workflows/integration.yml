name: i9n

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  env:
    name: "init"
    uses: ./.github/workflows/environment.yml

  build-dependencies:
    needs: env
    timeout-minutes: ${{ fromJSON(needs.env.outputs.TIMEOUT_LONG) }}
    name: dependencies | ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_ARM64_STABLE }}
    steps:
      - name: "Clone"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      - name: "Buildkit"
        uses: ./.github/actions/install-buildkit
      - name: "Build base dependencies for all targets"
        run: |
          sudo -E buildctl build \
            --frontend=dockerfile.v0 \
            --import-cache="type=gha,scope=build-i9n-${{ matrix.runner }}" \
            --export-cache="type=gha,scope=build-i9n-${{ matrix.runner }},compression=zstd,mode=max" \
            --opt target="test-integration" \
            --local dockerfile=$(pwd) \
            --local context=$(pwd)

#  build-dependencies:
#    needs: env
#    timeout-minutes: ${{ fromJSON(needs.env.outputs.TIMEOUT_LONG) }}
#    name: dependencies
#    runs-on: ${{ matrix.runner }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
##          - runner: ${{ needs.env.outputs.RUNNER_LINUX_ARM64_STABLE }}
#    steps:
#      - name: "Clone"
#        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
#      - name: "Buildkit"
#        uses: ./.github/actions/install-buildkit
#      - name: "Build base dependencies for all targets"
#        run: |
#          # FIXME: rid docker
#          sudo docker run --net none --privileged --rm ghcr.io/apostasie/binfmt --install linux/arm64 || true
#          # This is building both arm and amd versions of the base dependencies (assembly-integration)
#          # IMPORTANT: currently, you cannot run a non-native go with qemu as of 2025-03.
#          # For that reason, the next stages down there cannot be pinned to the same BUILDPLATFORM, and all builds
#          # have to be done here.
#          # This will introduce significant cache churn, but there is no other choice.
#          sudo -E buildctl build \
#            --opt platform=linux/amd64,linux/arm64 \
#            --frontend=dockerfile.v0 \
#            --import-cache="type=gha,scope=build-i9n" \
#            --export-cache="type=gha,scope=build-i9n,compression=zstd,mode=max" \
#            --opt target="test-integration" \
#            --local dockerfile=$(pwd) \
#            --local context=$(pwd)

  test-integration:
    needs:
      - env
      - build-dependencies
    timeout-minutes: ${{ fromJSON(needs.env.outputs.TIMEOUT_LONG) }}
    name: "${{ matrix.rooting }} | ${{ matrix.runner }} | go ${{ matrix.go }} (flaky: ${{ matrix.flaky }})"
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # amd64
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootful"
            flaky: false
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootful"
            flaky: true
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootless"
            flaky: false
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_AMD64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootless"
            flaky: true

          # arm64
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_ARM64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootful"
            flaky: false
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_ARM64_STABLE }}
            go: ${{ needs.env.outputs.GO_STABLE }}
            rooting: "rootful"
            flaky: true

          # canary
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_CANARY }}
            go: ${{ needs.env.outputs.GO_CANARY }}
            rooting: "rootful"
            flaky: false
          - runner: ${{ needs.env.outputs.RUNNER_LINUX_CANARY }}
            go: ${{ needs.env.outputs.GO_CANARY }}
            rooting: "rootful"
            flaky: true
    steps:
      - name: "Clone"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      # FIXME: remove - only necessary if we build lepton
      - name: "Setup"
        uses: ./.github/actions/node
        with:
          go-version: ${{ matrix.go }}
      - name: "Buildkit"
        uses: ./.github/actions/install-buildkit
      - name: "Prepare integration test environment"
        run: |
          extras=()
          if [ "${{ matrix.go }}" == "${{ needs.env.outputs.GO_CANARY }}" ]; then
            # Build integration image with updated dependencies
            . ./hack/build-integration-canary.sh
            LOG_LEVEL=info canary::build::integration
          fi
          extras+=(--local context=$(pwd))
          time sudo -E buildctl build \
            --opt platform=$ACTION_NODE_OS/$ACTION_NODE_ARCH \
            --frontend=dockerfile.v0 \
            --import-cache="type=gha,scope=build-i9n-${{ matrix.runner }}" \
            --output=type=image,name=test-integration \
            --opt target="test-integration" \
            --local dockerfile=$(pwd) \
            "${extras[@]}"
      - name: "Set up AppArmor"
        run: |
          cat <<EOT | sudo tee "/etc/apparmor.d/usr.local.bin.rootlesskit"
          abi <abi/4.0>,
          include <tunables/global>
          /usr/local/bin/rootlesskit flags=(unconfined) {
          userns,
          # Site-specific additions and overrides. See local/README for details.
          include if exists <local/usr.local.bin.rootlesskit>
          }
          EOT
          sudo systemctl restart apparmor.service
      - name: "Remove snap loopback devices (conflicts with our loopback devices in TestRunDevice)"
        run: |
          sudo systemctl disable --now snapd.service snapd.socket
          sudo apt-get purge -y snapd
          sudo losetup -Dv
          sudo losetup -lv
#          sudo apt-get install -qq expect
      - name: "Make lepton"
        run: |
          # FIXME: replace by a fixed version download
          make build
          sudo make install
      - name: "QEMU"
        run: |
          [ "$RUNNER_ARCH" == "amd64" ] || sudo lepton run --net none --privileged --rm ghcr.io/apostasie/binfmt --install linux/amd64
          [ "$RUNNER_ARCH" == "arm64" ] || sudo lepton run --net none --privileged --rm ghcr.io/apostasie/binfmt --install linux/arm64
      - name: "Run integration tests"
        run: |
          # FIXME: we should delete on container shutdown instead
          sudo ip link delete lepton0 2>/dev/null || true
          # See https://github.com/farcloser/lepton/issues/172
          [ "${{ matrix.rooting }}" == "rootless" ] && \
            command=(/test-integration-rootless.sh ./hack/test-integration.sh) || \
            command=(./hack/test-integration.sh)
          sudo su --pty -c "lepton run -t --net host --rm --privileged test-integration ${command[*]} -test.only-flaky=${{matrix.flaky}}"
